% Copyright (c) 2025 Mohammad Al-Sa'd
% 
% Permission is hereby granted, free of charge, to any person obtaining a
% copy of this software and associated documentation files (the "Software"),
% to deal in the Software without restriction, including without limitation
% the rights to use, copy, modify, merge, publish, distribute, sublicense,
% and/or sell copies of the Software, and to permit persons to whom the
% Software is furnished to do so, subject to the following conditions:
% 
% The above copyright notice and this permission notice shall be included
% in all copies or substantial portions of the Software.
% 
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
% OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
% THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
% FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
% DEALINGS IN THE SOFTWARE.
%
% Email: ext-mohammad.al-sad@hus.fi, mohammad.al-sad@helsinki.fi
%        mohammad.al-sad@tuni.fi, alsad.mohamed@gmail.com
%
% The following reference should be cited whenever this script is used:
% Al-Sa'd, M., & Boashash, B. (2025). Time-Frequency Functional Brain 
% Networks: Application to Newborn Seizure Analysis. 
% IntechOpen. doi: 10.5772/intechopen.1011395
%
% Last Modification: 27-August-2025
%
% Description:
% This demo script generates figure 1 that shows an example multi-channel 
% newborn EEG signal at different frequency bands along with its seizure mask.

%% Initialization
clear; close all; clc;
addpath(genpath('Functions'));
dataset_path = fullfile(pwd,"The Helsinki EEG dataset"); % This is the raw dataset path

%% Parameters
sub_num = 1;      % Patient's number
fs_old  = 256;    % The old sampling rate
fs_new  = 64;     % The new sampling rate

%% EEG IIR bandpass filters
full_h = designfilt('bandpassiir','PassbandFrequency1',0.5,'StopbandFrequency1',0.4,...
    'PassbandFrequency2',30,'StopbandFrequency2',31.5,'StopbandAttenuation1',30,...
    'PassbandRipple',1,'StopbandAttenuation2',30,'match','stopband','SampleRate',fs_old);
delta_h = designfilt('bandpassiir','PassbandFrequency1',0.5,'StopbandFrequency1',0.4,...
    'PassbandFrequency2',4,'StopbandFrequency2',4.3,'StopbandAttenuation1',30,...
    'PassbandRipple',1,'StopbandAttenuation2',30,'match','stopband','SampleRate',fs_new);
theta_h = designfilt('bandpassiir','PassbandFrequency1',4,'StopbandFrequency1',3.8,...
    'PassbandFrequency2',8,'StopbandFrequency2',8.2,'StopbandAttenuation1',30,...
    'PassbandRipple',1,'StopbandAttenuation2',30,'match','stopband','SampleRate',fs_new);
alpha_h = designfilt('bandpassiir','PassbandFrequency1',8,'StopbandFrequency1',7.7,...
    'PassbandFrequency2',13,'StopbandFrequency2',13.3,'StopbandAttenuation1',30,...
    'PassbandRipple',1,'StopbandAttenuation2',30,'match','stopband','SampleRate',fs_new);
beta_h = designfilt('bandpassiir','PassbandFrequency1',13,'StopbandFrequency1',12.7,...
    'PassbandFrequency2',30,'StopbandFrequency2',30.3,'StopbandAttenuation1',30,...
    'PassbandRipple',1,'StopbandAttenuation2',30,'match','stopband','SampleRate',fs_new);
eeg_h = {delta_h, theta_h, alpha_h, beta_h};

%% Loading data
load(fullfile(dataset_path,'annotations_2017.mat'));
data = edfread(fullfile(dataset_path,"eeg" + sub_num + ".edf"));

%% Pre-Processing
% Take the EEG sensors only
x_raw = table2array(data); x_raw = x_raw(:,1:19);
x_raw = cell2mat(x_raw);
% Signal bandpass filtering
signal_ud = flipud(x_raw);
signal_big = [signal_ud; x_raw; signal_ud];
temp = filtfilt(full_h, signal_big);
temp = temp(size(x_raw,1)+1:2*size(x_raw,1),:);
% Resampling
temp = resample(temp,fs_new,fs_old);
% EEG frequency band decomposition
x = zeros([size(temp), length(eeg_h)]);
for i = 1:length(eeg_h)
    signal_ud = flipud(temp);
    dump1 = filtfilt(eeg_h{i}, [signal_ud; temp; signal_ud]);
    x(:,:,i) = dump1(size(temp,1)+1:2*size(temp,1),:);
end
% mask interpolation/aagregation
mask = sum(annotat_new{sub_num}) > 1;
mask = repelem(mask,1,size(x,1)/length(mask));

%% Region of interest extraction
st = 74800;
L = 1024;
x_range = st:(st+3*L);
x_eeg = x(x_range,:,:);
mask = mask(x_range);

%% Plotting
t = 0:1/fs_new:(length(x_range)-1)/fs_new;
f = 0:fs_new/(2*L-1):fs_new/2;
sh = [20 17 10 8];
ch_n = size(x_eeg,2);
ccc = [0 0.447 0.741
    0.85 0.325 0.098
    0.466 0.674 0.188
    0.494 0.184 0.556
    0.929 0.694 0.125];
Labels = {'$\delta$','$\theta$','$\alpha$','$\beta$'};
Bands = [0 4; 4 8; 8 13; 13 31];
tag = data.Properties.VariableNames;
tag = tag(1:19);
tag = split(tag,'_',2);
tag = squeeze(tag(1,1,:));
tag = char(tag);
tag = flipud(tag(:,4:end));
W = diff(Bands,1,2);
figure('Color','w','Position',[50 50 1000 800]);
tt = tiledlayout(size(x_eeg,3),1,"TileSpacing","tight","Padding","tight");
for k = size(x_eeg,3):-1:1
    nexttile;
    plot_multichannel(squeeze(x_eeg(:,:,k))',sh(k),fs_new,ccc(k,:),0.75);
    hold on; y = [(sh(k)*(1-ch_n))-sh(k) sh(k) sh(k) (sh(k)*(1-ch_n))-sh(k)];
    x = t(logical(mask)); x = [x(1) x(1) x(end) x(end)];
    h = fill(x,y,'k'); set(h,'FaceAlpha',0.1,'Linestyle','none');
    xlim([t(1) t(end)]);
    if k ~= 1
        set(gca,'XTickLabel','','TickLabelInterpreter','latex','FontSize',14);
    else
        set(gca,'TickLabelInterpreter','latex','FontSize',14);
        xlabel('Time (seconds)','fontsize',16,'Interpreter','latex');
    end
    ax = gca;
    set(gca,'YtickLabels',tag,'TickLabelInterpreter','latex');
    ax.XAxis.FontSize = 14; ax.YAxis.FontSize = 8;
    legend([Labels{k} '-Band'],'fontsize',16,'Interpreter','latex','Location','northeast');
end
ylabel(tt,'EEG Channels','fontsize',16,'Interpreter','latex');
set(gcf,'PaperUnits','inches','Units','inches'); screenposition = get(gcf,'Position');
set(gcf,'PaperPosition',[0 0 screenposition(3:4)],'PaperSize',screenposition(3:4));

ch = [14, 19];
figure('Color','w','Position',[50 50 1000 800]);
T = tiledlayout(2,2,"TileSpacing","tight","Padding","tight"); % Outer layout
cnt = 0;
for p = 1:length(ch)
    for q = 1:length(ch)
        nexttile(T); axis off;
        TFD = cell(1,size(x_eeg,3));
        for k = 1:size(x_eeg,3)
            zp = squeeze(x_eeg(:,ch(p),k));
            zq = squeeze(x_eeg(:,ch(q),k));
            TFD{k} = zeros(L,size(x_eeg,1));
            for i = 1:size(x_eeg,1)/L
                st = 1 + (i-1)*L;
                fi = i*L;
                z1 = kaiser(L,0.5).*zp(st:fi);
                z2 = kaiser(L,0.5).*zq(st:fi);
                TFD{k}(:,st:fi) = abs(Xckd(z1, z2, 1, 0.45, 0.05));
            end
        end
        tt = tiledlayout(T,sum(W),1,"TileSpacing","tight","Padding","tight");
        cnt = cnt + 1;
        tt.Layout.Tile = cnt;
        for k = size(x_eeg,3):-1:1
            nexttile(tt,[W(k) 1]);
            colormap(1-gray); ax = imagesc(t,f,TFD{k}); axis xy;
            axis([t(1) t(end) Bands(k,:)]);
            if k ~= 1
                set(gca,'XTickLabel','','TickLabelInterpreter','latex','FontSize',14);
            else
                set(gca,'TickLabelInterpreter','latex','FontSize',14);
            end
            if k == 1
                set(gca,'YTick',[0.5 3]);
            elseif k == 2
                set(gca,'YTick',[5 7]);
            elseif k ==3
                set(gca,'YTick',[10 12]);
            end
            if cnt == 2 || cnt == 4
                set(gca,'YTickLabel','');
            end
        end
        if cnt < 3
            set(gca,'XTickLabel','');
        else
            xlabel('Time (seconds)','fontsize',16,'Interpreter','latex');
        end
        if cnt == 2 || cnt == 4
            set(gca,'YTickLabel','');
        else
            ylabel(tt,'Frequency (Hz)','fontsize',16,'Interpreter','latex');
        end
    end
end

annotation(gcf,'textbox',...
    [0.225787788712593 0.93875502008032 0.135573609158465 0.0411646586345377],...
    'VerticalAlignment','middle',...
    'String','$\rho_{14,14}(t,f)$',...
    'Interpreter','latex',...
    'HorizontalAlignment','center',...
    'FontSize',20,...
    'FitBoxToText','off',...
    'EdgeColor','none');
annotation(gcf,'textbox',...
    [0.702587788712594 0.93875502008032 0.135573609158465 0.0411646586345377],...
    'VerticalAlignment','middle',...
    'String','$\rho_{14,19}(t,f)$',...
    'Interpreter','latex',...
    'HorizontalAlignment','center',...
    'FontSize',20,...
    'FitBoxToText','off',...
    'EdgeColor','none');
annotation(gcf,'textbox',...
    [0.225787788712593 0.458935742971885 0.135573609158465 0.0411646586345377],...
    'VerticalAlignment','middle',...
    'String','$\rho_{19,14}(t,f)$',...
    'Interpreter','latex',...
    'HorizontalAlignment','center',...
    'FontSize',20,...
    'FitBoxToText','off',...
    'EdgeColor','none');
annotation(gcf,'textbox',...
    [0.702587788712594 0.458935742971885 0.135573609158465 0.0411646586345377],...
    'VerticalAlignment','middle',...
    'String','$\rho_{19,19}(t,f)$',...
    'Interpreter','latex',...
    'HorizontalAlignment','center',...
    'FontSize',20,...
    'FitBoxToText','off',...
    'EdgeColor','none');

annotation(gcf,'textbox',...
    [0.025 0.948293172690761 0.135573609158465 0.0411646586345377],...
    'VerticalAlignment','middle',...
    'String','$\beta$-Band',...
    'Interpreter','latex',...
    'HorizontalAlignment','center',...
    'FontSize',12,...
    'FitBoxToText','off',...
    'EdgeColor','none');
annotation(gcf,'textbox',...
    [0.025 0.69457831325301 0.135573609158465 0.0411646586345377],...
    'VerticalAlignment','middle',...
    'String','$\alpha$-Band',...
    'Interpreter','latex',...
    'HorizontalAlignment','center',...
    'FontSize',12,...
    'FitBoxToText','off',...
    'EdgeColor','none');
annotation(gcf,'textbox',...
    [0.025 0.623092369477907 0.135573609158465 0.0411646586345377],...
    'VerticalAlignment','middle',...
    'String','$\theta$-Band',...
    'Interpreter','latex',...
    'HorizontalAlignment','center',...
    'FontSize',12,...
    'FitBoxToText','off',...
    'EdgeColor','none');
annotation(gcf,'textbox',...
    [0.025 0.56817269076305 0.135573609158465 0.0411646586345377],...
    'VerticalAlignment','middle',...
    'String','$\delta$-Band',...
    'Interpreter','latex',...
    'HorizontalAlignment','center',...
    'FontSize',12,...
    'FitBoxToText','off',...
    'EdgeColor','none');
annotation(gcf,'textbox',...
    [0.5062 0.948293172690761 0.135573609158465 0.0411646586345377],...
    'VerticalAlignment','middle',...
    'String','$\beta$-Band',...
    'Interpreter','latex',...
    'HorizontalAlignment','center',...
    'FontSize',12,...
    'FitBoxToText','off',...
    'EdgeColor','none');
annotation(gcf,'textbox',...
    [0.5062 0.69457831325301 0.135573609158465 0.0411646586345377],...
    'VerticalAlignment','middle',...
    'String','$\alpha$-Band',...
    'Interpreter','latex',...
    'HorizontalAlignment','center',...
    'FontSize',12,...
    'FitBoxToText','off',...
    'EdgeColor','none');
annotation(gcf,'textbox',...
    [0.5062 0.623092369477907 0.135573609158465 0.0411646586345377],...
    'VerticalAlignment','middle',...
    'String','$\theta$-Band',...
    'Interpreter','latex',...
    'HorizontalAlignment','center',...
    'FontSize',12,...
    'FitBoxToText','off',...
    'EdgeColor','none');
annotation(gcf,'textbox',...
    [0.5062 0.56817269076305 0.135573609158465 0.0411646586345377],...
    'VerticalAlignment','middle',...
    'String','$\delta$-Band',...
    'Interpreter','latex',...
    'HorizontalAlignment','center',...
    'FontSize',12,...
    'FitBoxToText','off',...
    'EdgeColor','none');
annotation(gcf,'textbox',...
    [0.025 0.468373493975902 0.135573609158465 0.0411646586345377],...
    'VerticalAlignment','middle',...
    'String','$\beta$-Band',...
    'Interpreter','latex',...
    'HorizontalAlignment','center',...
    'FontSize',12,...
    'FitBoxToText','off',...
    'EdgeColor','none');
annotation(gcf,'textbox',...
    [0.025 0.215512048192769 0.135573609158465 0.0411646586345377],...
    'VerticalAlignment','middle',...
    'String','$\alpha$-Band',...
    'Interpreter','latex',...
    'HorizontalAlignment','center',...
    'FontSize',12,...
    'FitBoxToText','off',...
    'EdgeColor','none');
annotation(gcf,'textbox',...
    [0.025 0.145381526104416 0.135573609158465 0.0411646586345377],...
    'VerticalAlignment','middle',...
    'String','$\theta$-Band',...
    'Interpreter','latex',...
    'HorizontalAlignment','center',...
    'FontSize',12,...
    'FitBoxToText','off',...
    'EdgeColor','none');
annotation(gcf,'textbox',...
    [0.025 0.0885542168674681 0.135573609158465 0.0411646586345377],...
    'VerticalAlignment','middle',...
    'String','$\delta$-Band',...
    'Interpreter','latex',...
    'HorizontalAlignment','center',...
    'FontSize',12,...
    'FitBoxToText','off',...
    'EdgeColor','none');
annotation(gcf,'textbox',...
    [0.5062 0.468373493975902 0.135573609158465 0.0411646586345377],...
    'VerticalAlignment','middle',...
    'String','$\beta$-Band',...
    'Interpreter','latex',...
    'HorizontalAlignment','center',...
    'FontSize',12,...
    'FitBoxToText','off',...
    'EdgeColor','none');
annotation(gcf,'textbox',...
    [0.5062 0.215512048192769 0.135573609158465 0.0411646586345377],...
    'VerticalAlignment','middle',...
    'String','$\alpha$-Band',...
    'Interpreter','latex',...
    'HorizontalAlignment','center',...
    'FontSize',12,...
    'FitBoxToText','off',...
    'EdgeColor','none');
annotation(gcf,'textbox',...
    [0.5062 0.145381526104416 0.135573609158465 0.0411646586345377],...
    'VerticalAlignment','middle',...
    'String','$\theta$-Band',...
    'Interpreter','latex',...
    'HorizontalAlignment','center',...
    'FontSize',12,...
    'FitBoxToText','off',...
    'EdgeColor','none');
annotation(gcf,'textbox',...
    [0.5062 0.0885542168674681 0.135573609158465 0.0411646586345377],...
    'VerticalAlignment','middle',...
    'String','$\delta$-Band',...
    'Interpreter','latex',...
    'HorizontalAlignment','center',...
    'FontSize',12,...
    'FitBoxToText','off',...
    'EdgeColor','none');
set(gcf,'PaperUnits','inches','Units','inches'); screenposition = get(gcf,'Position');
set(gcf,'PaperPosition',[0 0 screenposition(3:4)],'PaperSize',screenposition(3:4));

%% Saving
opt = input('Do you want to save results (Y/N)\n','s');
if(opt == 'y' || opt == 'Y')
    if ~isfolder("Results"), mkdir("Results"); end
    print(1,fullfile("Results","tEEG"),'-dpdf','-r400');
    print(2,fullfile("Results","tfEEG"),'-dpdf','-r400');
end
